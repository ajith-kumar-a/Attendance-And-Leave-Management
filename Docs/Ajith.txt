need to install 
ng add @angular/material

npx rm -rf node_modules --force
npx npm install --force
npx npm install chart.js --force
npx npm install ng2-charts --force

npx npm install chart.js ng2-charts --force
npx npm install chart.js

SetUp AttendenceAPi :
    -> mkvirtualenv Attendanceapi
    -> workon Attendanceapi
    -> cd back end 
    -> pip install -r req.txt


Creating Apps :
    -> django-admin startapp Roles
    -> django-admin startapp Attendance
    -> django-admin startapp LeaveRequest
    -> django-admin startapp Permissions
    -> django-admin startapp LeaveTypes
    -> django-admin startapp Notification
  


step to connect api 

   -  npm install @auth0/angular-jwt
    - ng generate service services/NotificationService
    - ng generate interceptor interceptors/auth
    - ng generate component components/StaffLeaveRequestStatus


ng generate component components/UserRegistration

views.py Attendance
    from rest_framework import viewsets, permissions
from rest_framework.response import Response
from rest_framework import status as http_status
from .models import AttendanceStatus
from .serializers import AttendanceStatusSerializer
from .serializers import AttendanceSerializer

from .models import Attendance

class AttendanceStatusViewSet(viewsets.ModelViewSet):
    serializer_class = AttendanceStatusSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        # Return all records or filter if necessary
        return AttendanceStatus.objects.all()

    def list(self, request, *args, **kwargs):
        queryset = self.get_queryset()
        serializer = self.get_serializer(queryset, many=True)
        return Response({
            'status': http_status.HTTP_200_OK,
            'data': serializer.data
        })

    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        if not serializer.is_valid():
            return Response({
                'status': http_status.HTTP_400_BAD_REQUEST,
                'data': serializer.errors,
                'message': 'Invalid Data'
            })
        self.perform_create(serializer)
        headers = self.get_success_headers(serializer.data)
        return Response({
            'status': http_status.HTTP_201_CREATED,
            'data': serializer.data,
            'message': 'Attendance Status created successfully'
        }, status=http_status.HTTP_201_CREATED, headers=headers)

    def retrieve(self, request, *args, **kwargs):
        instance = self.get_object()
        serializer = self.get_serializer(instance)
        return Response({
            'status': http_status.HTTP_200_OK,
            'data': serializer.data
        })

    def update(self, request, *args, **kwargs):
        partial = kwargs.pop('partial', False)
        instance = self.get_object()
        serializer = self.get_serializer(instance, data=request.data, partial=partial)
        if not serializer.is_valid():
            return Response({
                'status': http_status.HTTP_400_BAD_REQUEST,
                'data': serializer.errors,
                'message': 'Invalid Data'
            })
        self.perform_update(serializer)
        return Response({
            'status': http_status.HTTP_200_OK,
            'data': serializer.data,
            'message': 'Attendance Status updated successfully'
        })

    def partial_update(self, request, *args, **kwargs):
        return self.update(request, *args, **kwargs)

    def destroy(self, request, *args, **kwargs):
        instance = self.get_object()
        self.perform_destroy(instance)
        return Response({
            'status': http_status.HTTP_204_NO_CONTENT,
            'message': 'Attendance Status deleted successfully'
        })
    



class AttendanceViewSet(viewsets.ModelViewSet):
    serializer_class = AttendanceSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        # Return records for the current logged-in user
        return Attendance.objects.filter(user_id=self.request.user)

    def perform_create(self, serializer):
        user = self.request.user
        date = serializer.validated_data.get('date')

        # Check if an attendance record already exists for the same date
        if Attendance.objects.filter(user_id=user, date=date).exists():
            raise ValidationError("Attendance record for this date already exists.")

        serializer.save(user_id=user)

    def list(self, request, *args, **kwargs):
        queryset = self.get_queryset()
        serializer = self.get_serializer(queryset, many=True)
        return Response({
            'status': http_status.HTTP_200_OK,
            'data': serializer.data
        })

    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        if not serializer.is_valid():
            return Response({
                'status': http_status.HTTP_400_BAD_REQUEST,
                'data': serializer.errors,
                'message': 'Invalid Data'
            })
        self.perform_create(serializer)
        headers = self.get_success_headers(serializer.data)
        return Response({
            'status': http_status.HTTP_201_CREATED,
            'data': serializer.data,
            'message': 'Attendance created successfully'
        }, status=http_status.HTTP_201_CREATED, headers=headers)

    def retrieve(self, request, *args, **kwargs):
        instance = self.get_object()
        serializer = self.get_serializer(instance)
        return Response({
            'status': http_status.HTTP_200_OK,
            'data': serializer.data
        })

    def update(self, request, *args, **kwargs):
        partial = kwargs.pop('partial', False)
        instance = self.get_object()
        serializer = self.get_serializer(instance, data=request.data, partial=partial)
        if not serializer.is_valid():
            return Response({
                'status': http_status.HTTP_400_BAD_REQUEST,
                'data': serializer.errors,
                'message': 'Invalid Data'
            })
        self.perform_update(serializer)
        return Response({
            'status': http_status.HTTP_200_OK,
            'data': serializer.data,
            'message': 'Attendance updated successfully'
        })

    def partial_update(self, request, *args, **kwargs):
        return self.update(request, *args, **kwargs)

    def destroy(self, request, *args, **kwargs):
        instance = self.get_object()
        self.perform_destroy(instance)
        return Response({
            'status': http_status.HTTP_204_NO_CONTENT,
            'message': 'Attendance record deleted successfully'
        })


        from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import AttendanceViewSet, AttendanceStatusViewSet

router = DefaultRouter()
router.register(r'details', AttendanceViewSet, basename='attendance')
router.register(r'status', AttendanceStatusViewSet, basename='attendance-status')

urlpatterns = [
    path('', include(router.urls)),
]



ser.py
from rest_framework import serializers
from .models import Attendance, AttendanceStatus
from users.models import User

class AttendanceStatusSerializer(serializers.ModelSerializer):
    class Meta:
        model = AttendanceStatus
        fields = ['id', 'status']

class AttendanceSerializer(serializers.ModelSerializer):
    status = serializers.PrimaryKeyRelatedField(queryset=AttendanceStatus.objects.all())  # Nested serializer for status
    user_id = serializers.PrimaryKeyRelatedField(queryset=User.objects.all())  # Read-only field for user ID

    class Meta:
        model = Attendance
        fields = ['id', 'user_id', 'date', 'status', 'remarks', 'login_time', 'logout_time']

    def validate(self, data):
        user = self.context['request'].user
        date = data.get('date')

        # Check if an attendance record already exists for the same date
        if Attendance.objects.filter(user_id=user, date=date).exists():
            raise serializers.ValidationError("Attendance record for this date already exists.")

        return data

    def create(self, validated_data):
        user = self.context['request'].user
        return Attendance.objects.create(user_id=user, **validated_data)


chk commit














______________________________________________________________________________________________________________________
import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';
import { AuthService } from '../../services/auth.service';

@Component({
  selector: 'app-students',
  templateUrl: './students.component.html',
  styleUrls: ['./students.component.css']
})
export class StudentsComponent implements OnInit {
  user: any;
  img: any;
  attendance: any[] = [];
  statusMap: any[] = [];
  leaveRequest: any = {
    leaveType: '',
    reason: '',
    startDate: '',
    endDate: ''
  };
  baseUrl: string = 'http://127.0.0.1:8000';

  @ViewChild('fileInput') fileInput!: ElementRef; // Non-null assertion operator

  constructor(private AuthService: AuthService) {}

  ngOnInit(): void {
    this.fetchStudentDetails();
    this.fetchStatusDetails(); // Fetch status details first
  }

  fetchStudentDetails() {
    this.AuthService.getUserDetails('userme/').subscribe(
      (data) => {
        this.user = data.data;
        console.log('Full user object:', this.user);
        this.fetchStudentAttendance(this.user.id);
        this.img = `${this.baseUrl}${this.user.profile_picture}`;
        console.log(this.img);
       
      },
      (error) => {
        console.error('Error fetching user details', error);
      }
    );
  }

  fetchStudentAttendance(userId: number): void {
    this.AuthService.getUserDetails(`Attendancedetail/by-user/${userId}/`).subscribe(
      (data) => {
        this.attendance = data.data;
      },
      (error) => {
        console.error('Error fetching attendance details', error);
      }
    );
  }

  fetchStatusDetails(): void {
    this.AuthService.getUserDetails('Attendancestatus/').subscribe(
      (data) => {
        this.statusMap = data.data;
        console.log('status', data);
       
      },
      (error) => {
        console.error('Error fetching status details', error);
      }
    );
  }


  onFileChange(event: any): void {
    const file = event.target.files[0];
    if (file) {
      const formData = new FormData();
      formData.append('profile_picture', file);
      
      this.AuthService.updateProfilePicture(this.user.id, formData).subscribe(
        (response) => {
          // console.log('hiiiiiiiiiiiiiiiii')
          this.user.profile_picture = response.data.profile_picture; // Assuming the API returns the updated profile picture URL
          this.img = `${this.baseUrl}${this.user.profile_picture}`;
          console.log('Profile picture updated successfully', response);
       
        },
        (error) => {
          console.error('Error updating profile picture', error);
        }
      );
    }
  }
}














+______________________________________________________________________________________________________________________
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Identity Card</title>
    <link rel="stylesheet" href="student-id.component.css">
    <link href="https://fonts.googleapis.com/css?family=Courgette|Open+Sans&display=swap" rel="stylesheet"> 
</head>
<body>
    <!-- student-id.component.html -->
<section>
    <!-- Download button -->
    <!-- <div class="download-button">
        <button (click)="downloadPDF()">Download PDF</button>
    </div> -->

    <!-- Display the content only if userData is available -->
    <div #contentToConvert *ngIf="userData">
        <aside class="profile-card">
            <header>
                <a href="/">
                    <!-- Use dynamic profile picture -->
                    <img [src]="userData.profile_picture || 'https://assets.codepen.io/307305/internal/avatars/users/default.png?fit=crop&format=auto&height=80&version=1&width=80'" />
                </a>
                <h1>{{ userData.username || 'David Jones' }}</h1>
                <h2>{{ userData.profession || 'Web Developer' }}</h2>
            </header>

            <!-- bit of a bio; who are you? -->
            <div class="profile-bio">
                <p>{{ userData.email || 'Even when everything is perfect, you can always make it better. Break barriers in your head, create something crazy and don\'t forget Code is Poetry...' }}</p>
            </div>    
        </aside>
    </div>
</section>

</body>
            <div><img src="assets/logo1back.png" height="200px" width="200px"></div>

</html>

<div class="container">
  <div class="card">
    <div class="pic-container">
      <img class="pic" src="https://i.ibb.co/sJKD14w/pro-pic.jpg" alt="Profile Picture">
    </div>
    <div class="name">
      <span>Anonymous</span>
    </div>
    <div class="title">
      <span>PROGRAMMER</span>
    </div>
    <div class="description">
      <p>Your future is created by what you do today not tomorrow.</p>
    </div>
    <div class="message">
      <a href="https://m.me/codingandstuff/">Message</a>
    </div>
    <div class="links">
      <a href="https://www.facebook.com/codingandstuff/" target="_blank" class="fb">
        <i class="fab fa-facebook-f"></i>
      </a>
      <a href="https://www.youtube.com/channel/UCZvsBQB7yXx-jDPNCPrVCoQ" target="_blank" class="yt">
        <i class="fab fa-youtube"></i>
      </a>
      <a href="https://codepen.io/codingandstuff" target="_blank" class="cp">
        <i class="fab fa-codepen"></i>
      </a>
      <a href="https://coding-and-stuff.blogspot.com/" target="_blank" class="bg">
        <i class="fab fa-blogger-b"></i>
      </a>
    </div>
  </div>
</div>



@import url("https://fonts.googleapis.com/css2?family=Roboto&display=swap");

html {
    height: 100%;
}
body {
  background-color: #bcdee7;
    position: fixed;
  padding: 0px;
  margin: 0px;
  width: 100%;
  height: 100%;
  font: normal 14px/1.618em "Roboto", sans-serif;
  -webkit-font-smoothing: antialiased;
}
body:after {
  background-image: none;
  background-position: center center;
  background-repeat: no-repeat;
  position: fixed;
  width: 133vmin;
  height: 100vmin;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
body:before {
    height: 0px;
    padding: 0px;
    border: 110em solid #313440;
  position: absolute;
  left: 50%;
  top: 100%;
    z-index: 2;
    display: block;
    -webkit-border-radius: 50%;
    border-radius: 50%;
  -webkit-transform: translate(-50%, -50%);
  transform: translate(-50%, -50%);
    -webkit-animation: puff_portrait 0.5s 1.8s cubic-bezier(0.55, 0.055, 0.675, 0.19) forwards, borderRadius 0.2s 2.3s linear forwards;
    animation: puff_portrait 0.5s 1.8s cubic-bezier(0.55, 0.055, 0.675, 0.19) forwards, borderRadius 0.2s 2.3s linear forwards;
}
h1, h2 {
    font-weight: 400;
    margin: 0px 0px 5px 0px;
}
h1 {
    font-size: 24px;
}
h2 {
    font-size: 16px;
}
p {
    margin: 0px;
}
.profile-card {
  background: #FFB300;
  width: 56px;
  height: 56px;
  position: absolute;
  left: 50%;
  top: 50%;
    z-index: 2;
  overflow: hidden;
    opacity: 0;
    margin-top: 70px;
  -webkit-transform: translate(-50%, -50%);
  transform: translate(-50%, -50%);
  -webkit-border-radius: 50%;
  border-radius: 50%;
  -webkit-box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.16), 0px 3px 6px rgba(0, 0, 0, 0.23);
  box-shadow: 0px 3px 6px rgba(0 ,0, 0, 0.16), 0px 3px 6px rgba(0, 0, 0, 0.23);
    -webkit-animation: init 0.5s 0.2s cubic-bezier(0.55, 0.055, 0.675, 0.19) forwards, moveDown 1s 0.8s cubic-bezier(0.6, -0.28, 0.735, 0.045) forwards, moveUp 1s 1.8s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards, materia_landscape 0.5s 2.7s cubic-bezier(0.86, 0, 0.07, 1) forwards;
    animation: init 0.5s 0.2s cubic-bezier(0.55, 0.055, 0.675, 0.19) forwards, moveDown 1s 0.8s cubic-bezier(0.6, -0.28, 0.735, 0.045) forwards, moveUp 1s 1.8s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards, materia_landscape 0.5s 2.7s cubic-bezier(0.86, 0, 0.07, 1) forwards;
}
.profile-card header {
    width: 179px;
    height: 280px;
    padding: 40px 20px 30px 20px;
    display: inline-block;
    /* float: left; */
    border-right: 2px dashed #EEEEEE;
  background: #FFFFFF;
    color: #000000;
    margin-top: 50px;
    opacity: 0;
    text-align: center;
    -webkit-animation: moveIn 1s 3.1s ease forwards;
    animation: moveIn 1s 3.1s ease forwards;
}
.profile-card header h1 {
    color: #FF5722;
}
.profile-card header a {
    display: inline-block;
    text-align: center;
    position: relative;
    margin: 25px 30px;
}
.profile-card header a:after {
  position: absolute;
    content: "";
  bottom: 3px;
  right: 3px;
  width: 20px;
  height: 20px;
    border: 4px solid #FFFFFF;
    -webkit-transform: scale(0);
    transform: scale(0);
    background: -webkit-linear-gradient(top, #2196F3 0%, #2196F3 50%, #FFC107 50%, #FFC107 100%);
    background: linear-gradient(#2196F3 0%, #2196F3 50%, #FFC107 50%, #FFC107 100%);
    -webkit-border-radius: 50%;
    border-radius: 50%;
    -webkit-box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.1);
    box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.1);
    -webkit-animation: scaleIn 0.3s 3.5s ease forwards;
    animation: scaleIn 0.3s 3.5s ease forwards;
}
.profile-card header a > img {
    width: 150px;
  height: 150px;
  background-color: #1d89e6;
  /* object-fit: none; */
  object-position: center;
    max-width: 100%;
    -webkit-border-radius: 50%;
    border-radius: 50%;
    -webkit-transition: -webkit-box-shadow 0.3s ease;
    transition: box-shadow 0.3s ease;
    -webkit-box-shadow: 0px 0px 0px 8px rgba(0, 0, 0, 0.06);
    box-shadow: 0px 0px 0px 8px rgba(0, 0, 0, 0.06);
}
.profile-card header a:hover > img {
    -webkit-box-shadow: 0px 0px 0px 12px rgba(0, 0, 0, 0.1);
    box-shadow: 0px 0px 0px 12px rgba(0, 0, 0, 0.1);
}
.profile-card .profile-bio {
    width: 175px;        
    height: 180px;
    display: inline-block;
    /* float: right; */
    padding: 50px 20px 30px 20px;
  background: #FFFFFF;
    color: #333333;
    margin-top: 50px;
    text-align: center;
    opacity: 0;
    -webkit-animation: moveIn 1s 3.1s ease forwards;
    animation: moveIn 1s 3.1s ease forwards;
}
.profile-social-links {
    width: 218px;        
    display: inline-block;
    /* float: right; */
    margin: 0px;
    padding: 15px 20px;
  background: #FFFFFF;
    margin-top: 50px;
    text-align: center;
    opacity: 0;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    -webkit-animation: moveIn 1s 3.1s ease forwards;
    animation: moveIn 1s 3.1s ease forwards;
}
.profile-social-links li {
    list-style: none;
    margin: -5px 0px 0px 0px;
    padding: 0px;
    float: left;
    width: 33.3%;
    text-align: center;
}
.profile-social-links li a {
    display: inline-block;
    width: 24px;
    height: 24px;
    padding: 6px;
    position: relative;
    overflow: hidden!important;
    -webkit-border-radius: 50%;
    border-radius: 50%;
}
.profile-social-links li a img {
    position: relative;
    z-index: 1;
}
.profile-social-links li a:before {
    display: block;
    content: "";
    background: rgba(0, 0, 0, 0.3);
    position: absolute;
    left: 0px;
    top: 0px;
    width: 36px;
    height: 36px;
    opacity: 1;
    -webkit-transition: transform 0.4s ease, opacity 1s ease-out;
    transition: transform 0.4s ease, opacity 1s ease-out;
    -webkit-transform: scale3d(0, 0, 1);
    transform: scale3d(0, 0, 1);
    -webkit-border-radius: 50%;
    border-radius: 50%;
}
.profile-social-links li a:hover:before {
    -webkit-animation: ripple 1s ease forwards;
    animation: ripple 1s ease forwards;
}
.profile-social-links li a img,
.profile-social-links li a svg {
    width: 24px;
}


@media screen and (min-aspect-ratio: 4/3) {
    body {
        background-size: 100% auto;
    }
    body:before {
        width: 0px;
    }
    @-webkit-keyframes puff {
        0% {
            top: 100%;
            width: 0px;
            padding-bottom: 0px;
        }
      100% {
            top: 50%;
            width: 100%;
            padding-bottom: 100%;
        } 
    }
    @keyframes puff {
        0% {
            top: 100%;
            width: 0px;
            padding-bottom: 0px;
        }
      100% {
            top: 50%;
            width: 100%;
            padding-bottom: 100%;
        } 
    }
}
@media screen and (min-height: 480px) {
  .profile-card {
    -webkit-animation: init 0.5s 0.2s cubic-bezier(0.55, 0.055, 0.675, 0.19) forwards, moveDown 1s 0.8s cubic-bezier(0.6, -0.28, 0.735, 0.045) forwards, moveUp 1s 1.8s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards, materia_portrait 0.5s 2.7s cubic-bezier(0.86, 0, 0.07, 1) forwards;
    animation: init 0.5s 0.2s cubic-bezier(0.55, 0.055, 0.675, 0.19) forwards, moveDown 1s 0.8s cubic-bezier(0.6, -0.28, 0.735, 0.045) forwards, moveUp 1s 1.8s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards, materia_portrait 0.5s 2.7s cubic-bezier(0.86, 0, 0.07, 1) forwards;
  }
  .profile-card header {
        width: auto;
        height: auto;
        padding: 30px 20px;
        display: block;
        float: none;
        border-right: none;
    }
    .profile-card .profile-bio {
        width: auto;
        height: auto;
        padding: 15px 20px 30px 20px;
        display: block;
        float: none; 
    }
    .profile-social-links {
        width: 100%;       
        display: block;
        float: none; 
    }
}
@media screen and (min-aspect-ratio: 4/3) {
    body {
        background-size: 100% auto;
    }
    body:before {
        width: 0px;
    -webkit-animation: puff_landscape 0.5s 1.8s cubic-bezier(0.55, 0.055, 0.675, 0.19) forwards, borderRadius 0.2s 2.3s linear forwards;
    animation: puff_landscape 0.5s 1.8s cubic-bezier(0.55, 0.055, 0.675, 0.19) forwards, borderRadius 0.2s 2.3s linear forwards;
  }
}
@-webkit-keyframes init {
    0% {
      width: 0px;
      height: 0px;
    }
  100% {
        width: 56px;
        height: 56px;
        margin-top: 0px;
        opacity: 1;
    } 
}
@keyframes init {
    0% {
      width: 0px;
      height: 0px;
    }
  100% {
        width: 56px;
        height: 56px;
        margin-top: 0px;
        opacity: 1;
    } 
}
@-webkit-keyframes puff_portrait {
    0% {
        top: 100%;
        height: 0px;
        padding: 0px;
    }
  100% {
        top: 50%;
        height: 100%;
        padding: 0px 100%;
    } 
}
@keyframes puff_portrait {
    0% {
        top: 100%;
        height: 0px;
        padding: 0px;
    }
  100% {
        top: 50%;
        height: 100%;
        padding: 0px 100%;
    } 
}
@-webkit-keyframes puff_landscape {
  0% {
    top: 100%;
    width: 0px;
    padding-bottom: 0px;
  }
  100% {
    top: 50%;
    width: 100%;
    padding-bottom: 100%;
  } 
}
@keyframes puff_landscape {
  0% {
    top: 100%;
    width: 0px;
    padding-bottom: 0px;
  }
  100% {
    top: 50%;
    width: 100%;
    padding-bottom: 100%;
  } 
}
@-webkit-keyframes borderRadius {
    0% {
        -webkit-border-radius: 50%;
    }
  100% {
        -webkit-border-radius: 0px;
    } 
}
@keyframes borderRadius {
    0% {
        -webkit-border-radius: 50%;
    }
  100% {
        border-radius: 0px;
    } 
}
@-webkit-keyframes moveDown {
    0% {
        top: 50%;
    }
  50% {
     top: 40%;
    }
    100% {
       top: 100%;
    } 
}
@keyframes moveDown {
    0% {
        top: 50%;
    }
  50% {
     top: 40%;
    }
    100% {
       top: 100%;
    } 
}
@-webkit-keyframes moveUp {
    0% {
        background: #FFB300;
        top: 100%;
    }
  50% {
     top: 40%;
    }
    100% {
       top: 50%;
       background: #E0E0E0;
    } 
}
@keyframes moveUp {
    0% {
        background: #FFB300;
        top: 100%;
    }
  50% {
     top: 40%;
    }
    100% {
       top: 50%;
       background: #E0E0E0;
    } 
}
@-webkit-keyframes materia_landscape {
    0% {
        background: #E0E0E0;
    }
    50% {
        -webkit-border-radius: 4px;
    }
    100% {
        width: 440px;
        height: 280px;
        background: #FFFFFF;
        -webkit-border-radius: 4px;
    }
}
@keyframes materia_landscape {
    0% {
        background: #E0E0E0;
    }
    50% {
        border-radius: 4px;
    }
    100% {
        width: 440px;
        height: 280px;
        background: #FFFFFF;
        border-radius: 4px;
    }
}
@-webkit-keyframes materia_portrait {
  0% {
    background: #E0E0E0;
  }
  50% {
    -webkit-border-radius: 4px;
  }
  100% {
    width: 280px;
    height: 454px;
    background: #FFFFFF;
    -webkit-border-radius: 4px;
  }
}
@keyframes materia_portrait {
  0% {
    background: #E0E0E0;
  }
  50% {
    border-radius: 4px;
  }
  100% {
    width: 280px;
    height: 454px;
    background: #FFFFFF;
    border-radius: 4px;
  }
}
@-webkit-keyframes moveIn {
    0% {
        margin-top: 50px;
        opacity: 0;
    }
  100% { 
        opacity: 1;
        margin-top: -20px;
    } 
}
@keyframes moveIn {
    0% {
        margin-top: 50px;
        opacity: 0;
    }
  100% { 
        opacity: 1;
        margin-top: -20px;
    } 
}
@-webkit-keyframes scaleIn {
    0% {
        -webkit-transform: scale(0);
    }
  100% { 
        -webkit-transform: scale(1);
    } 
}
@keyframes scaleIn {
    0% {
        transform: scale(0);
    }
  100% { 
        transform: scale(1);
    } 
}
@-webkit-keyframes ripple {
    0% {
        transform: scale3d(0, 0, 0); 
    }
    50%, 100% {
        -webkit-transform: scale3d(1, 1, 1);
    }
    100% {
        opacity: 0;
    }
}
@keyframes ripple {
    0% {
        transform: scale3d(0, 0, 0); 
    }
    50%, 100% {
        transform: scale3d(1, 1, 1);
    }
    100% {
        opacity: 0;
    }
}

